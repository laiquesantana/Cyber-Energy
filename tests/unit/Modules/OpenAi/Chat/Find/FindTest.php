<?php

namespace unit\Modules\OpenAi\Chat\Find;

use PHPUnit\Framework\TestCase;
use Saas\Project\Modules\OpenAi\Chat\Find\UseCase;
use Saas\Project\Modules\OpenAi\Chat\Find\Gateways\RetrieveChatHistoryGateway;
use Saas\Project\Dependencies\Cache\CacheInterface;
use Saas\Project\Dependencies\Interfaces\LogInterface;
use Saas\Project\Modules\OpenAi\Chat\Entities\ChatHistory;
use Saas\Project\Modules\OpenAi\Chat\Generics\Collections\ChatHistoryCollection;

class FindTest extends TestCase
{
    public function testGetByIdFoundInCache()
    {
        $retrieveGatewayMock = $this->createMock(RetrieveChatHistoryGateway::class);
        $cacheMock = $this->createMock(CacheInterface::class);
        $loggerMock = $this->createMock(LogInterface::class);

        $chatHistoryId = 1;
        $chatHistory = new ChatHistory(
            'Tell me about hydropower.',
            'Hydropower is generated by water flow.'
        );
        $chatHistory->setId($chatHistoryId);

        $cacheMock->expects($this->once())
            ->method('get')
            ->with("chat_history:{$chatHistoryId}")
            ->willReturn($chatHistory);

        $useCase = new UseCase(
            $retrieveGatewayMock,
            $cacheMock,
            $loggerMock
        );

        $result = $useCase->getById($chatHistoryId);

        $this->assertInstanceOf(ChatHistory::class, $result);
        $this->assertEquals($chatHistoryId, $result->getId());
        $this->assertEquals('Tell me about hydropower.', $result->getUserInput());
        $this->assertEquals('Hydropower is generated by water flow.', $result->getAiResponse());
    }

    public function testGetByIdNotFoundInCacheButFoundInDatabase()
    {
        $retrieveGatewayMock = $this->createMock(RetrieveChatHistoryGateway::class);
        $cacheMock = $this->createMock(CacheInterface::class);
        $loggerMock = $this->createMock(LogInterface::class);

        $chatHistoryId = 2;
        $chatHistory = new ChatHistory('Tell me about geothermal energy.', 'Geothermal energy is earth’s heat.');
        $chatHistory->setId($chatHistoryId);

        $cacheMock->expects($this->once())
            ->method('get')
            ->with("chat_history:{$chatHistoryId}")
            ->willReturn(null);

        $cacheMock->expects($this->once())
            ->method('set')
            ->with("chat_history:{$chatHistoryId}", $chatHistory, 300);

        $retrieveGatewayMock->expects($this->once())
            ->method('findById')
            ->with($chatHistoryId)
            ->willReturn($chatHistory);

        $useCase = new UseCase(
            $retrieveGatewayMock,
            $cacheMock,
            $loggerMock
        );

        $result = $useCase->getById($chatHistoryId);

        $this->assertInstanceOf(ChatHistory::class, $result);
        $this->assertEquals($chatHistoryId, $result->getId());
        $this->assertEquals('Tell me about geothermal energy.', $result->getUserInput());
        $this->assertEquals('Geothermal energy is earth’s heat.', $result->getAiResponse());
    }

    public function testGetByIdNotFound()
    {
        $retrieveGatewayMock = $this->createMock(RetrieveChatHistoryGateway::class);
        $cacheMock = $this->createMock(CacheInterface::class);
        $loggerMock = $this->createMock(LogInterface::class);

        $chatHistoryId = 3;

        $cacheMock->expects($this->once())
            ->method('get')
            ->with("chat_history:{$chatHistoryId}")
            ->willReturn(null);

        $retrieveGatewayMock->expects($this->once())
            ->method('findById')
            ->with($chatHistoryId)
            ->willReturn(null);

        $loggerMock->expects($this->once())
            ->method('info')
            ->with('Retrieving chat history by ID', ['id' => $chatHistoryId]);

        $loggerMock->expects($this->once())
            ->method('warning')
            ->with('Chat history not found', ['id' => $chatHistoryId]);

        $useCase = new UseCase(
            $retrieveGatewayMock,
            $cacheMock,
            $loggerMock
        );

        $result = $useCase->getById($chatHistoryId);

        $this->assertNull($result);
    }

    public function testGetAllFoundInCache()
    {
        $retrieveGatewayMock = $this->createMock(RetrieveChatHistoryGateway::class);
        $cacheMock = $this->createMock(CacheInterface::class);
        $loggerMock = $this->createMock(LogInterface::class);

        $chatHistoryCollection = new ChatHistoryCollection();
        $chatHistoryCollection->add(new ChatHistory('Tell me about bioenergy.', 'Bioenergy comes from biomass.'));
        $chatHistoryCollection->add(
            new ChatHistory('Tell me about tidal energy.', 'Tidal energy is generated by ocean tides.')
        );

        $cacheMock->expects($this->once())
            ->method('get')
            ->with('chat_history:all')
            ->willReturn($chatHistoryCollection);

        $useCase = new UseCase(
            $retrieveGatewayMock,
            $cacheMock,
            $loggerMock
        );

        $result = $useCase->getAll();

        $this->assertInstanceOf(ChatHistoryCollection::class, $result);
        $this->assertCount(1, $result->all());
    }

    public function testGetAllNotFoundInCacheButFoundInDatabase()
    {
        $retrieveGatewayMock = $this->createMock(RetrieveChatHistoryGateway::class);
        $cacheMock = $this->createMock(CacheInterface::class);
        $loggerMock = $this->createMock(LogInterface::class);

        $chatHistoryCollection = new ChatHistoryCollection();
        $chatHistoryCollection->add(
            new ChatHistory('Tell me about tidal energy.', 'Tidal energy is generated by ocean tides.')
        );

        $cacheMock->expects($this->once())
            ->method('get')
            ->with('chat_history:all')
            ->willReturn(null);

        $cacheMock->expects($this->once())
            ->method('set')
            ->with('chat_history:all', $chatHistoryCollection, 300);

        $retrieveGatewayMock->expects($this->once())
            ->method('findAll')
            ->willReturn($chatHistoryCollection);

        $useCase = new UseCase(
            $retrieveGatewayMock,
            $cacheMock,
            $loggerMock
        );

        $result = $useCase->getAll();

        $this->assertInstanceOf(ChatHistoryCollection::class, $result);
        $this->assertCount(1, $result->all());
    }

    public function testGetAllNotFound()
    {
        $retrieveGatewayMock = $this->createMock(RetrieveChatHistoryGateway::class);
        $cacheMock = $this->createMock(CacheInterface::class);
        $loggerMock = $this->createMock(LogInterface::class);

        $chatHistoryCollection = new ChatHistoryCollection();

        $cacheMock->expects($this->once())
            ->method('get')
            ->with('chat_history:all')
            ->willReturn(null);

        $retrieveGatewayMock->expects($this->once())
            ->method('findAll')
            ->willReturn($chatHistoryCollection);

        $useCase = new UseCase(
            $retrieveGatewayMock,
            $cacheMock,
            $loggerMock
        );

        $result = $useCase->getAll();

        $this->assertInstanceOf(ChatHistoryCollection::class, $result);
        $this->assertCount(0, $result->all());
    }
}
